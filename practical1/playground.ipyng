{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/George/miniconda2/lib/python2.7/site-packages/matplotlib/font_manager.py:273: UserWarning: Matplotlib is building the font cache using fc-list. This may take a moment.\n",
      "  warnings.warn('Matplotlib is building the font cache using fc-list. This may take a moment.')\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "import math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Import data and drop smiles column\n",
    "data = pd.read_csv(\"train_small.csv\")\n",
    "data = data.drop(['smiles'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(1, 62.0),\n",
       " (6, 47.0),\n",
       " (7, 97.0),\n",
       " (25, 41.0),\n",
       " (37, 37.0),\n",
       " (44, 1.0),\n",
       " (68, 65.0),\n",
       " (69, 35.0),\n",
       " (72, 76.0),\n",
       " (87, 19.0),\n",
       " (90, 83.0),\n",
       " (102, 32.0),\n",
       " (119, 22.0),\n",
       " (123, 25.0),\n",
       " (126, 94.0),\n",
       " (132, 97.0),\n",
       " (173, 44.0),\n",
       " (176, 2.0),\n",
       " (187, 13.0),\n",
       " (196, 3.0),\n",
       " (199, 1.0),\n",
       " (200, 1.0),\n",
       " (208, 2.0),\n",
       " (218, 32.0),\n",
       " (225, 34.0),\n",
       " (226, 99.0),\n",
       " (243, 47.0),\n",
       " (248, 93.0),\n",
       " (251, 17.0),\n",
       " (252, 7.0)]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features = []\n",
    "for i in xrange(1, 257):\n",
    "    string = \"%03d\" % (i)\n",
    "    string = \"feat_\" + string\n",
    "    x = sum(data[string])\n",
    "    if (x != 0 and x != 100):\n",
    "        features.append((i, x))\n",
    "features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feat_001</th>\n",
       "      <th>feat_002</th>\n",
       "      <th>feat_003</th>\n",
       "      <th>feat_004</th>\n",
       "      <th>feat_005</th>\n",
       "      <th>feat_006</th>\n",
       "      <th>feat_007</th>\n",
       "      <th>feat_008</th>\n",
       "      <th>feat_009</th>\n",
       "      <th>feat_010</th>\n",
       "      <th>...</th>\n",
       "      <th>feat_248</th>\n",
       "      <th>feat_249</th>\n",
       "      <th>feat_250</th>\n",
       "      <th>feat_251</th>\n",
       "      <th>feat_252</th>\n",
       "      <th>feat_253</th>\n",
       "      <th>feat_254</th>\n",
       "      <th>feat_255</th>\n",
       "      <th>feat_256</th>\n",
       "      <th>gap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.98</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 257 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   feat_001  feat_002  feat_003  feat_004  feat_005  feat_006  feat_007  \\\n",
       "0         0         0         0         0         1         0         1   \n",
       "1         1         0         0         0         1         0         1   \n",
       "2         1         0         0         0         1         1         1   \n",
       "3         1         0         0         0         1         1         1   \n",
       "4         0         0         0         0         1         0         1   \n",
       "\n",
       "   feat_008  feat_009  feat_010  ...   feat_248  feat_249  feat_250  feat_251  \\\n",
       "0         0         0         0  ...          1         0         0         0   \n",
       "1         0         0         0  ...          1         0         0         1   \n",
       "2         0         0         0  ...          1         0         0         0   \n",
       "3         0         0         0  ...          1         0         0         0   \n",
       "4         0         0         0  ...          1         0         0         0   \n",
       "\n",
       "   feat_252  feat_253  feat_254  feat_255  feat_256   gap  \n",
       "0         0         0         0         0         0  1.19  \n",
       "1         0         0         0         0         0  1.60  \n",
       "2         1         0         0         0         0  1.49  \n",
       "3         1         0         0         0         0  1.36  \n",
       "4         0         0         0         0         0  1.98  \n",
       "\n",
       "[5 rows x 257 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[array([ 10.,  11.,  16.,  16.,  10.,  16.,  10.,  11.,  15.,  16.,  16.,\n",
      "        10.,  15.,  15.,  16.,  15.,  15.,  16.,  11.,  11.,  11.,  10.,\n",
      "        16.,  15.,  15.,  11.,  11.,  16.,  11.,  16.,  11.,  10.,  16.,\n",
      "        10.,  11.,  11.,  16.,  16.,  16.,  11.,  10.,  16.,  11.,  11.,\n",
      "        11.,  15.,  15.,  11.,  11.,  10.,  10.,  10.,  11.,  10.,  11.,\n",
      "        15.,  10.,  15.,  10.,  16.,  11.,  16.,  15.,  11.,  10.,  11.,\n",
      "        11.,  16.,  10.,  10.,  16.,  11.,  15.,  11.,  16.,  11.,  15.,\n",
      "        15.,  11.,  11.,  16.,   6.,  11.,  11.,  15.,  16.,  16.,  11.,\n",
      "        10.,  16.,  11.,  11.,  11.,  16.,  10.,  16.,  15.,  15.,  11.,\n",
      "        15.]), array([ 0.,  5.,  0.,  5.,  0.,  0.,  0.,  5.,  0.,  5.,  5.,  0.,  0.,\n",
      "        0.,  0.,  0.,  0.,  0.,  0.,  5.,  5.,  0.,  0.,  0.,  0.,  5.,\n",
      "        5.,  5.,  5.,  5.,  5.,  0.,  5.,  0.,  5.,  0.,  5.,  5.,  0.,\n",
      "        5.,  0.,  5.,  0.,  5.,  5.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
      "        5.,  0.,  5.,  0.,  0.,  0.,  0.,  5.,  5.,  5.,  0.,  5.,  0.,\n",
      "        0.,  0.,  0.,  0.,  0.,  5.,  5.,  0.,  5.,  5.,  5.,  0.,  0.,\n",
      "        0.,  5.,  0.,  5.,  0.,  5.,  0.,  5.,  0.,  5.,  0.,  0.,  0.,\n",
      "        0.,  5.,  5.,  0.,  5.,  0.,  0.,  5.,  0.]), array([  0.,   5.,   5.,   0.,   0.,   5.,   0.,   0.,   0.,   0.,   0.,\n",
      "         0.,   0.,   0.,   5.,   0.,   0.,   0.,   5.,   5.,   5.,   0.,\n",
      "         5.,   0.,   0.,   5.,   5.,   5.,   5.,   0.,   5.,   0.,   0.,\n",
      "         0.,   5.,   5.,   0.,   5.,   0.,   5.,   0.,   0.,   5.,   5.,\n",
      "         0.,   0.,   0.,  10.,   5.,   0.,   0.,   0.,   5.,   0.,   0.,\n",
      "         0.,   0.,   0.,   0.,   0.,   0.,   5.,   0.,   0.,   0.,   5.,\n",
      "         5.,   5.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
      "         0.,   5.,   5.,   5.,   5.,   5.,   5.,   0.,   5.,   5.,   5.,\n",
      "         0.,   0.,   5.,   5.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
      "         0.]), array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
      "        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
      "        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
      "        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
      "        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
      "        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
      "        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
      "        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]), array([ 10.,  10.,  15.,   5.,   5.,  15.,   5.,  10.,  10.,   0.,   5.,\n",
      "         5.,   5.,  10.,  15.,   5.,  10.,  10.,  15.,  10.,  15.,  10.,\n",
      "        10.,   5.,  10.,  15.,   5.,  10.,  10.,   5.,  15.,   0.,  10.,\n",
      "        10.,  10.,  15.,  10.,  10.,   5.,  15.,  10.,  10.,  15.,  10.,\n",
      "        10.,   5.,  10.,  10.,  15.,  10.,  10.,  10.,  10.,  10.,  10.,\n",
      "         0.,  10.,  10.,  10.,  10.,   5.,   5.,  10.,   5.,  10.,  15.,\n",
      "        10.,  10.,  10.,   5.,  10.,  10.,   5.,  10.,   0.,  10.,  10.,\n",
      "        10.,  15.,   5.,  10.,   0.,  15.,  10.,  10.,  10.,  10.,   5.,\n",
      "         5.,   5.,   5.,  10.,  10.,  10.,   5.,   0.,  10.,   5.,   0.,\n",
      "        10.]), array([  5.,   5.,  10.,  10.,   5.,   5.,   5.,   5.,   0.,   5.,   5.,\n",
      "         5.,  10.,   5.,   5.,   5.,   5.,  10.,   5.,   5.,   5.,   5.,\n",
      "         0.,  10.,   5.,   5.,   5.,   5.,   5.,   5.,   5.,   5.,  10.,\n",
      "         0.,   5.,   5.,   5.,   5.,  10.,   5.,   0.,   5.,   5.,   5.,\n",
      "         5.,   0.,   5.,   0.,   5.,   0.,   0.,   5.,   5.,   5.,   5.,\n",
      "        10.,   5.,   5.,   5.,   5.,   5.,   0.,  10.,   5.,   5.,   5.,\n",
      "         5.,   5.,   5.,   5.,   5.,   5.,   5.,   0.,  10.,   5.,   5.,\n",
      "         5.,   5.,   5.,   0.,   5.,   5.,   5.,   5.,   5.,   0.,   5.,\n",
      "         0.,  10.,   5.,   5.,   5.,  10.,   5.,  10.,  10.,   5.,  10.,\n",
      "         5.]), array([ 0.,  5.,  0.,  5.,  0.,  0.,  0.,  5.,  0.,  5.,  5.,  0.,  0.,\n",
      "        0.,  0.,  0.,  0.,  0.,  0.,  0.,  5.,  0.,  0.,  0.,  0.,  0.,\n",
      "        0.,  5.,  0.,  5.,  0.,  0.,  5.,  0.,  5.,  0.,  5.,  5.,  0.,\n",
      "        5.,  0.,  5.,  0.,  5.,  5.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
      "        5.,  0.,  5.,  0.,  0.,  0.,  0.,  5.,  5.,  5.,  0.,  5.,  0.,\n",
      "        0.,  0.,  0.,  0.,  0.,  0.,  5.,  0.,  5.,  0.,  5.,  0.,  0.,\n",
      "        0.,  0.,  0.,  5.,  0.,  0.,  0.,  5.,  0.,  5.,  0.,  0.,  0.,\n",
      "        0.,  5.,  5.,  0.,  5.,  0.,  0.,  5.,  0.]), array([ 10.,   5.,  15.,  10.,  10.,  10.,   5.,   5.,   5.,  10.,  10.,\n",
      "        10.,  10.,  10.,  15.,   5.,   5.,  10.,   5.,   5.,   5.,  10.,\n",
      "         5.,   5.,  15.,   5.,   5.,  10.,   5.,   5.,   5.,   5.,   0.,\n",
      "         5.,   5.,   5.,   5.,  10.,   5.,   5.,   5.,  10.,   5.,   5.,\n",
      "         5.,   5.,   5.,  10.,   5.,   5.,   5.,   5.,   5.,  10.,  10.,\n",
      "        10.,   5.,  15.,   5.,  10.,  10.,   5.,  10.,   5.,   5.,   5.,\n",
      "         5.,  10.,  10.,   5.,   5.,   5.,  10.,   5.,   5.,   5.,  15.,\n",
      "        10.,   5.,   5.,   5.,   0.,  10.,   0.,  15.,  10.,   5.,   5.,\n",
      "         5.,  10.,   0.,   5.,  10.,   5.,  10.,   5.,   5.,  10.,  10.,\n",
      "        10.]), array([ 5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,\n",
      "        5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,\n",
      "        5.,  5.,  5.,  5.,  5.,  0.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,\n",
      "        5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,\n",
      "        5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,\n",
      "        5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,\n",
      "        5.,  5.,  5.,  0.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,  5.,\n",
      "        5.,  5.,  5.,  5.,  5.,  5.,  5.,  0.,  5.]), array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
      "        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
      "        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
      "        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
      "        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
      "        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
      "        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
      "        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]), array([  0.,   5.,   5.,   5.,   0.,   5.,   0.,   0.,   0.,   0.,   0.,\n",
      "         0.,   0.,   0.,   5.,   0.,   0.,   5.,   5.,   5.,   5.,   0.,\n",
      "         5.,   0.,   0.,   5.,   5.,   5.,   5.,   0.,   5.,   0.,   0.,\n",
      "         0.,   5.,   5.,   0.,   5.,   5.,   5.,   0.,   0.,   5.,   5.,\n",
      "         0.,   0.,   0.,   5.,   5.,   0.,   0.,   0.,   5.,   0.,   0.,\n",
      "         0.,   0.,   0.,   0.,   0.,   0.,   5.,   0.,   0.,   0.,   5.,\n",
      "         5.,  10.,   0.,   0.,   5.,   0.,   0.,   0.,   5.,   0.,   0.,\n",
      "         0.,   5.,   5.,   5.,   5.,   5.,   5.,   0.,   5.,  10.,   5.,\n",
      "         0.,   5.,   5.,   5.,   0.,   0.,   0.,   5.,   0.,   0.,   0.,\n",
      "         0.]), array([ 0.,  5.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
      "        0.,  0.,  0.,  0.,  0.,  0.,  5.,  0.,  0.,  0.,  0.,  0.,  5.,\n",
      "        5.,  0.,  5.,  0.,  5.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
      "        5.,  0.,  0.,  0.,  5.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
      "        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  5.,  0.,  0.,  0.,\n",
      "        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  5.,  0.,  0.,  0.,\n",
      "        0.,  0.,  5.,  0.,  0.,  5.,  0.,  0.,  0.,  5.,  0.,  0.,  0.,\n",
      "        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]), array([  0.,   0.,   0.,   0.,   5.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
      "         0.,   0.,   0.,   5.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
      "         0.,   0.,   0.,   0.,   5.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
      "         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
      "         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
      "         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
      "         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
      "         0.,   0.,   5.,   0.,   5.,   0.,  10.,   0.,   0.,   0.,   0.,\n",
      "         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
      "         0.]), array([ 0.,  5.,  0.,  5.,  0.,  0.,  0.,  5.,  0.,  5.,  5.,  0.,  0.,\n",
      "        0.,  0.,  0.,  0.,  0.,  0.,  0.,  5.,  0.,  0.,  0.,  0.,  0.,\n",
      "        0.,  5.,  0.,  5.,  0.,  0.,  5.,  0.,  5.,  0.,  5.,  5.,  0.,\n",
      "        5.,  0.,  5.,  0.,  5.,  5.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
      "        5.,  0.,  5.,  0.,  0.,  0.,  0.,  5.,  5.,  5.,  0.,  5.,  0.,\n",
      "        0.,  0.,  0.,  0.,  0.,  0.,  5.,  0.,  5.,  0.,  5.,  0.,  0.,\n",
      "        0.,  0.,  0.,  5.,  0.,  0.,  0.,  5.,  0.,  5.,  0.,  0.,  0.,\n",
      "        0.,  5.,  5.,  0.,  5.,  0.,  0.,  5.,  0.]), array([ 5.,  5.,  5.,  5.,  5.,  6.,  5.,  5.,  6.,  6.,  5.,  5.,  5.,\n",
      "        6.,  6.,  6.,  6.,  5.,  5.,  0.,  5.,  5.,  6.,  6.,  5.,  5.,\n",
      "        5.,  6.,  5.,  6.,  5.,  6.,  5.,  5.,  5.,  5.,  6.,  6.,  5.,\n",
      "        5.,  5.,  5.,  5.,  5.,  5.,  6.,  6.,  5.,  5.,  5.,  5.,  5.,\n",
      "        5.,  5.,  5.,  6.,  5.,  6.,  5.,  6.,  5.,  6.,  6.,  5.,  5.,\n",
      "        5.,  5.,  5.,  5.,  5.,  6.,  5.,  6.,  5.,  6.,  5.,  6.,  5.,\n",
      "        5.,  5.,  6.,  5.,  5.,  5.,  6.,  5.,  6.,  5.,  5.,  6.,  5.,\n",
      "        5.,  5.,  6.,  5.,  6.,  6.,  6.,  6.,  5.]), array([  5.,  10.,  15.,  15.,   5.,  10.,   5.,   5.,  10.,  10.,  10.,\n",
      "         5.,  10.,  10.,  10.,  10.,  10.,  15.,   5.,  10.,   5.,   5.,\n",
      "        15.,  10.,  10.,  10.,   5.,  10.,  10.,  10.,  10.,   5.,  10.,\n",
      "         5.,   5.,   5.,  10.,  10.,  15.,   5.,   5.,  10.,   5.,   5.,\n",
      "         5.,  10.,  10.,   5.,   5.,   5.,   5.,   5.,   5.,   5.,   5.,\n",
      "        10.,   5.,  10.,   5.,  10.,   5.,  15.,  10.,   5.,   5.,   5.,\n",
      "         5.,  10.,   5.,   5.,  15.,   5.,  10.,   5.,  20.,   5.,  10.,\n",
      "        10.,   5.,   5.,  15.,   5.,   5.,  10.,  10.,  10.,  10.,  10.,\n",
      "         5.,  15.,  10.,   5.,   5.,  10.,   5.,  15.,  10.,  10.,   5.,\n",
      "         5.])]\n"
     ]
    }
   ],
   "source": [
    "n = 16\n",
    "sums = []\n",
    "for i in xrange(256 / n):\n",
    "    string = \"%03d\" % (i * n + 1)\n",
    "    string = \"feat_\" + string\n",
    "    total = data[string]\n",
    "    for j in xrange(1, n):\n",
    "        string = \"%03d\" % (i * n + j + 1)\n",
    "        string = \"feat_\" + string\n",
    "        total += data[string]\n",
    "    sums.append(total.values)\n",
    "print sums"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
